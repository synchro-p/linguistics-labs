Что является основным критерием карьерного успеха? Как попасть на желанную работу, если недостаточно опыта? В этой статье я попытался ответить на эти и другие вопросы, связанные с карьерой IT-специалиста. 
 
 
 
 Сначала о моей карьере 
 
Сейчас я являюсь собственником и техническим директором компании  ByndyuSoft , работаю преподавателем на кафедре Информатики в  ЮУрГУ  и веду тренинги под общим названием  Результативное программирование . Приведу профессии в виде списка: 
 
 Учредитель IT-компании, B&Z 
 Ведущий разработчик, fuse8 
 Руководитель отдела цветной полиграфии, типография Алмаз 
 Таксист 
 Системный администратор, РГ Марк 
 Кассир, Пятерочка 
 Официант, несколько ресторанов в Америке 
 Грузчик, склад тракторных запчастей 
 
 
Я ценю весь этот опыт и не могу сказать, что какая-то профессия была важней других. Я посмотрел на разные компании, разные сферы и сейчас остановился на IT. 
 
 №0 Коротко о главном 
 
Главное, чему меня научили и что я понял на собственном опыте, можно сказать одной фразой из трех слов: 
 
 Всё решают отношения 
 
Кто заботится о заведении новых связей и поддерживает старые, тот ставит себя в очень выгодные условия. И это относится не только к карьере в IT, а вообще ко всему, чем вы занимаетесь. 
 
И наоборот, если раскидываться отношениями, ставить себя выше других, вести себя предвзято и придирчиво, ну и конечно, считать себя Д'Артаньяном, а всех остальных таковыми не считать; то надо понимать, что дурная слава быстро разносится, а круг друзей, коллег и родственников не бесконечен. 
 
Я несколько раз выступал с этой темой публично и просил аудиторию проголосовать за эту точку зрения. По моим наблюдениям только каждый пятый поддерживает эту позицию. Остальные согласны частично или полностью не согласны. Что интересно, из 20% согласных реально в этом направлении двигаются единицы. 
 
Вот для тех, кто не применяет принцип из трех слов в своей жизни, стоит сделать упор на следующие две темы, который я освещу дальше. 
 
 №1 Устраиваемся на работу 
 
Для начала хочу сказать, что все эти рекомендации я взял из собственного опыта или из успешного опыта своих друзей и коллег. Большинство заметок подойдет для карьеры в любой области, не только в IT. 
 
 Откуда брать опыт? 
 
Вопрос, который интересует каждого, когда он думает об устройстве на работу: «Откуда я возьму опыт работы, если я только учусь/работал в другой сфере/работал с другими платформами?». Это вполне резонный вопрос, потому что работодатели хотят нанять профессионала, который сразу с высокой степенью вероятности решит поставленные задачи. 
 
Вот несколько способов набрать необходимый опыт: 
 
 Участие в OpenSource проектах 
Мои друзья часто участвуют в OpenSource проектах. Они создавали свои проекты или поддерживали уже существующие. В этих проектах была и обратная связь от пользователей, и работа в команде, и выпуск версий, и планирование. 
 
 Просмотр кода OpenSource проектов 
В своё время я следил за развитием NHibernate, NAnt и ещё нескольких проектов на CodePlex. Я просматривал коммиты, которые делали разработчики. Разбирался в уже написанном коде и модульных тестах на этот код. Пытался понять принципы, по которым разработчики строили свои приложения. Делал также как они в своих программах. 
 
 Курсовые и диплом 
Если вы учитесь, то у вас есть отличная возможность взять проект посложнее и поинтереснее. Целых пять лет вы можете развлекаться с разработкой ПО. Вы можете пробовать разные подходы, по несколько раз переписывать свои программы. Учеба в университете — это уникальное время, когда у вас есть всё для саморазвития. 
 
 Фриланс 
Думаю, что многие из программистов, сделали хотя бы один проект для своих друзей, родственников или через сайты типа  free-lance.ru . Работа на фрилансе дает возможность экспериментировать с разными языками, делая небольшие проекты или дорабатывая уже существующие. За небольшие деньги, делая проекты с низкими рисками, вы можете набраться опыта в нужной вам области. Сейчас на фрилансе представлены все языки программирования и платформы, так что эту возможность нельзя игнорировать. 
 
 Стажировки в компаниях 
Сейчас многие компании с удовольствием берут начинающих разработчиков к себе на стажировки. Вы можете поработать в таких крупных компаниях, как Microsoft, Intel и др., просто попав к ним на стажировку. На стажировках, конечно, не дают участвовать в критичных и крупных проектах, но вы сможете пообщаться с опытными разработчиками, возможно, поработать с ними в паре. Опять же по результатам стажировки могут и на работу пригласить. В нашей компании тоже есть стажировки для студентов, правда, места ограничены. 
 
 
 
 Найдите того, кто будет объяснять 
 
Оглядываясь назад, я сделал неожиданное для себя замечание. Возьмем изучение шаблонов проектирования. Я читал много книжек, смотрел видео по этим темам, читал статьи. Но, всё это изучение закончилось бы ничем, если бы не два фактора. Во-первых, мне надо было применять это в реальных проектах. Во-вторых, я нашел тех, с кем можно было посоветоваться, кто мог бы доходчиво объяснить. И так по каждой теме. Будь то TDD, Agile, DDD или что-то другое. 
 
Ищите людей, которые смогут вам объяснить. Вот несколько советов по их поиску: 
 
 Пишите тем, кто пишет статьи и книги 
Люди, которые пишут публичные статьи или книги, будут очень рады получить обратную связь от вас. Напишите им вопрос или уточнение по статье и вам обязательно ответят. 
 
 Ходите на конференции 
Сейчас в сфере IT набирается всё больше и больше конференций и встреч. Только в Челябинске есть  .NETconf ,  SUNETA ,  beerconf  и другие. Если вы живете в Москве или Санкт-Петербурге, то плотность IT конференций в месяц там очень высокая. Придя на конференции, обязательно захватите с собой визиток и не стесняйтесь их давать вашим собеседникам. Возьмите с собой ноутбук и спросите про проблему в вашем коде у докладчика, который рассказывает по близкой теме. 
 
 Расспрашивайте преподавателей 
Опять же студенты находятся в самом выгодном положении. У студентов есть специальный человек, который будет отвечать на их вопросы — преподаватель. Сейчас я преподаю в университете и с удивлением вижу, что лишь малая часть студентов по максимуму пользуются этой привилегией. Почему-то большая часть студентов стесняются спрашивать и уточнять. 
 
 
 
Если вы ещё не уверены, стоит ли искать наставника или нет, то приведу известную фразу: «Если спросите, то будете дураком 5 минут, а если не спросите, то всю жизнь». 
 
 Будьте открыты 
 
Когда ко мне приходит резюме, то первое, что делаю, это ввожу имя соискателя в Google и читаю его статьи, комментарии к статям, вопросы и ответы на форумах, смотрю профили в социальных сетях и видео с выступлений. Думаю, что я не один такой, поэтому стоит задуматься о вашей публичной репутации. Даже одной хорошей статьи или одного хорошего выступления уже достаточно, чтобы сформировалось первое впечатление о соискателе. 
 
 Упор на положительном 
 
Обычно нравятся люди улыбчивые, уравновешенные, конструктивные. И наоборот не нравятся или оставляют негативный образ грустные, злые, пессимисты. Так вот, когда вы общаетесь со своим будущим работодателем, то постарайтесь попасть в первую группу людей. Кажется, что это очевидно, но есть одна тема, на которой разработчики спотыкаются. Это тема священных воин. Как часто вы слышали от коллег унылые разговоры про то, что: 
 
 
 я ненавижу Windows/Linux/Mac… 
 я ненавижу .NET/Java/C++… 
 я ненавижу IE/FireFox/Chrome… 
 
 
Жизнь всегда шире, чем наше представление о ней. Пусть ваша ненависть к платформе или технологии будет выражаться хотя бы нейтральной позиции. Не спешите впадать в крайности, чтобы не попасть под шутку: «Вам не нравятся кошки? Вы просто не умеете их готовить». 
 
 Зачем вам эта работа? 
 
Менеджеру по персоналу, менеджеру проекта или ведущему разработчику надо понимать ваши мотивы, которые сподвигли вас искать работу. В голове любого менеджера неоновыми буквами моргают слова: хороший кандидат — это мотивированный кандидат. На собеседовании я всегда спрашиваю о целях кандидата. Цели должны быть очерчены на год вперед, а в идеале на 5-10 лет. 
 
Не все понимают, что такое цель. Приведу несколько примеров целей: 
 
 Хочу много денег 
 Хотите путешествовать 
 Хочу, чтобы меня все любили 
 Через 3 года хочу участвовать в проекте с численностью разработчиков 100 человек и зарплатой в 100 тыс. рублей в месяц 
 
 
Первые три цели таковыми не являются, потому что неизмеримы. Разберем по порядку. Если кандидат хочет денег, то вполне нормально. Но деньги сами по себе не могут быть целью, т.к. нужны для чего-то. Вот для чего кандидату деньги, это и выясняется на собеседовании. 
 
Когда ко мне на собеседование пришел потенциальный менеджер проекта, то я понял, что откажу после диалога: 
 
 С какой целью вы пришли управлять проектами? 
 Я хочу, чтобы меня все любили. 
 
 
Что значит «все любили»? Когда это «все любили» наступит? Когда можно будет сказать, что вот сейчас меня все любят и цель достигнута? 
 
Последнюю цель я считаю наиболее приемлемой, потому что она является измеримой. Понятно, что через 3 года это может и не наступить, но если планка задана и глаза горят, то есть все шансы вырасти. Кандидаты с понятными мотивами самые желанные. 
 
 Как составить резюме? 
 
Первое, что увидит работодатель, будет ваше резюме. Резюме должно быть исключительно по делу. Работодатель после просмотра резюме должен знать ответы на вопросы: 
 
 
 Чего вы хотите? 
Укажите вашу цель явно, можно прямо первым предложением. Дальше надо понять, что вы уже добились. 
 
 Опишите предыдущий опыт 
Проекты с вашим участием, ваш личный вклад в эти проекты, вашу ответственность и результат. 
 
 
 
Это было про то, что должно быть в резюме. А теперь как составить резюме? Эти маленькие хитрости должны вам помочь: 
 
 Найдите готовые резюме 
Соберите и проанализируйте как можно больше резюме, которые сейчас есть на рынке. Это даст вам представление о той области, куда вы хотите попасть. 
 
 Соберите требования из вакансий 
Еще более мощный инструмент, соберите как можно больше вакансий, из тех, что вы хотите попасть. Проанализируйте требования к кандидатам и сразу поймете чего вам не хватает, на что обращать внимание при составлении резюме. 
 
 
 
 Собеседование 
 
Я не буду говорить о психологической составляющей собеседования, только несколько советов: 
 
 Подготовьте резюме 
Да, вы уже присылали резюме. И все-таки принесите еще одну копию с собой. После собеседования можете оставить ваше резюме, если есть визитка, то вместе с ней. 
 
 Расскажите о ваших целях 
Не стесняйтесь рассказать о том, чего вы хотите добиться. Скажите о целях явно без намеков и хождений вокруг да около. 
 
 Расскажите о ваших достижениях 
Всё это уже описано в вашем резюме, но блеск в глазах при рассказе о собственных достижениях не оставит равнодушным собеседующего. 
 
 Собеседуйте компанию 
Вы пришли на собеседование не только, чтобы себя показать. Вам нужно убедится, что вы захотите работать в этой компании, если вам предложат должность. Задавайте вопросы о компании, цели компании, планы. Вы узнаете много интересного, плюс эти вопросы выделят вас среди десятка других кандидатов, которые приходили за неделю. 
 
 
 
 №2 Делаем карьеру 
 
 Векторы роста 
 
Работа разработчика предполагает не просто кодирование изо дня в день. У каждого, кто занимается разработкой ПО есть как минимум 10 направлений для развития: 
 
 
 Software requirements 
 Software design 
 Software construction 
 Software testing 
 Software maintenance 
 Software configuration management 
 Software engineering management 
 Software engineering process 
 Software engineering tools and methods 
 Software quality 
 
 
Более подробно об этой теме можно прочитать в книге М. Коннела « Профессиональная разработка ПО ». 
 
 Саморазвитие 
 
Если вы хотите оставаться востребованным специалистом, то вам нужно быть в курсе IT мира и постоянно совершенствоваться. Это может звучать банально, но нужно уделять много времени саморазвитию. Я выделил несколько пунктов, которые помогают мне: 
 
 
 Чтение книг 
Я отдаю предпочтение бумажным книгам, которые заказываю в интернет-магазинах. Читаю примерно 1-2 книги в месяц. Бывает больше, но это норма. 
 
 Чтение статей 
Мой список блогов и ЖЖ в Google Reader постоянно обновляется и дополняется. Чтение статей помогает оставаться в курсе событий и тенденций IT мира. 
 
 Написание статей 
Написание статей помогает упорядочить мысли в собственной голове. Если вы не хотите публичности, то всё равно стоит писать статьи в закрытом блоге или просто в текстовом редакторе. 
 
 Участие в конференциях 
Я люблю много общаться и заводить интересные знакомства. Конференции для меня отличный источник и того, и другого. 
 
 Узнавать у коллег, в чем вам ещё нужно подрасти 
Это самый эффективный и психологически сложный способ «вытащить себя за волосы вверх». Спросить у своих коллег, чего мне не хватает, как мне стать лучше. Обязательно поинтересуйтесь — узнаете много интересного. 
 
 
 
 Сначала разработчик, потом менеджер? 
 
Выстраивая свою карьеру разработчики часто думают: сначала я поработаю разработчиком, потом стану менеджером проекта. Встречали таких? Я сам сначала работал разработчиком, а потом стал менеджером проекта. Т.е. такая схема работает, но есть подводные камни, которые не очевидны для начинающих этот путь: 
 
 
 Менеджер != Разработчик 
Хороший разработчик не превратится в хорошего менеджера. 
 
 Разные книги, разные подходы 
Когда я решил для себя, что буду руководить IT-проектами, то полностью сменил библиотеку и RSS-ленты. Переход от разработчика длился около двух лет и даже сейчас я еще не могу сказать, что чувствую себя на 100% руководителем, потому что просто не хватает знания и опыта. Сейчас для меня наиболее интересны: психология, управление проектами, методологии, управление рисками, управление персоналом, управление требованиями и т.д. 
 
 Разные границы ответственности 
Если говорить про иерархию в организации, то менеджер проекта и разработчик стоят на одной ступени. Отличие только в границах ответственности. 
 
 Вы кем хотите стать? 
Я еще раз предлагаю вам явно определить свои цели. Кем вы себя видите через 1-2 года? В зависимости от этого надо подбирать книги, конференции и RSS-ленты. 
 
 
 
 Технологии или подходы и принципы? 
 
Есть такая тенденция: начинающие разработчики много внимания уделяют технологиям (языки программирования, платформы). Через несколько лет работы над коммерческими проектами намного больше внимания начитают уделять подходам и принципам разработки. Становится понятно, что «серебряной пули» как не было так и не будет, что выбор языка программирования зависит прикладной задачи, как и платформа. 
 
Я думаю, что большинство разработчиков, которые читают эту главу, тоже заметили такую смену приоритетов. Ведь технологии меняются очень быстро, а правильные подходы только накапливаются со временем. Практично будет инвестировать б о льшую часть своего времени в изучение подходов и лучших практик. 
 
У меня есть сборник книг, которые я советую разработчикам, вставшим на путь изучения принципов « Что нужно узнать начинающим программистам ». 
 
Главу про карьеру, я хочу закончить словами своего дедушки, который любил говорить: «До 30 лет ты работаешь на свою карьеру, после 30 лет карьера работает на тебя». 
 
 Заключение 
 
Я буду рад, если вы извлечете что-то полезное для себя. Успехов в профессиональном и карьерном росте! 
 
 
 
 Ссылки 
 
Статья написана по материалам  конференции .NET разработчиков  и конференции  Дни технологий . 
 
Аналитика HeadHunter:  Через связи в князи


