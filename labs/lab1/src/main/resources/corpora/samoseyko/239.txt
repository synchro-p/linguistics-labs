Иллюстрация от  animitate Я плохой разработчик, я не люблю программировать, не читаю про новые фреймворки за завтраком, не разрабатываю пет проекты и не контрибьючу в опенсорс. Уже пять лет я притворяюсь Python разработчиком. Чтобы придать моим словам немного веса, я опишу свой карьерный путь. Я закончил бакалавриат в провинциальном университете по направлению Информационные Системы и Технологии, год работал айти специалистом в местном рекламном агентстве, полтора года младшим python разработчиком в финтех компании, год экспериментировал с фрилансом, два года работал в отделе автоматизации в компании по разработке мобильных игр. Прошел курс яндекс практикума Middle Python Developer. Сейчас я EngD trainee в техническом университете в Нидерландах. Ниже описаны несколько принципов, которым я следовал и которым я бы хотел, чтобы следовали мои коллеги с которыми я работал за это время. Выучи английский Английский язык дает тебе огромные преимущества на пути развития разработчика. Знание языка открывает тебе доступ к документации, туториалам, обучающим видео, курсам и даже вопросам на stack overflow. С английским b2 и выше можно подаваться на более интересные вакансии внутри СНГ, работать с иностранными заказчиками на фрилансе и подаваться на вакансии за рубежом.  Подготовься к собеседованию Перед тем как стать разработчиком, нужно успешно пройти собеседование и получить работу. Если собеседующий - гордый разработчик, который горит своей профессией, то ожидания у него будут завышенные не только в технической части, но и в части твоего отношения к программированию. Чтобы чувствовать себя более уверенным во время собеседования, погугли самые популярные вопросы и ответы, пройдись по основным терминам, конструкциям и синтаксису языка. Обрати внимание на соответствующие технологии. Таким образом, пока ты готовишься, возможно ты правда что-то узнаешь и притворяться разработчиком будет легче. Гугли, перед тем как спрашивать Говорят, что нет глупых вопросов, но это не так. Глупый вопрос - это вопрос на который можно найти ответ в гугле быстрее, чем задавая тот же самый вопрос своим коллегам. К тому же гугление развивает очень полезный навык - формулирование вопросов и мыслей в целом. Ведь вместо того, чтобы вывалить бессвязный поток мыслей, тебе действительно нужно подумать как задать вопрос так, чтобы гугл его понял и нашел то, что тебе нужно. Как и при подготовке к собеседованию, пока ты гуглишь ты правда можешь узнать что-то полезное, а самостоятельное решение проблем повысит твою уверенность в себе. В дальнейшем, ты будешь меньше переживать, что не сможешь самостоятельно справиться с какой-то из задач. А вишенка на торте этого совета в том, что ты будешь задавать коллегам более сложные вопросы и будешь казаться немного умнее, чем ты есть.  Настрой свою среду разработки Разработчики любят все автоматизировать. Это касается и их рабочих инструментов. Автоформатирование кода, оптимизация импортов, статический анализ кода, автоматизированные тесты. Все это уже готово и сделает твою жизнь проще. Настрой свою среду, выучи сочетания клавиш, чтобы выполнять все автоматизированные проверки, которые можешь. Таким образом код, которым ты делишься будет выглядеть более профессионально, а твои коллеги найдут меньше ошибок на код ревью. Следуй инструкциям и гайдлайнам своей команды Скорее всего твой тимлид уже побеспокоился о том, чтобы командная работа была простой и отлаженной и написал гайдлайны для работы над проектом. Следуй им. Проверяй и перепроверяй, что все выполнено так, как просили. Таким образом работа, которой ты делишься будет соответствовать требованиям, а тимлид почувствует, что не зря писал все эти гайдлайны. Одна из самых раздражающих вещей в пятый раз кидать ссылку на документ с гайдлайнами и сообщением: “Прочитай”. Если следовать этим советам, то будет казаться что ты самостоятельный и опытный разработчик, который знает, что делает даже если это пока не так. Но самый сок в том, что эти принципы позволяют постепенно развиваться. В итоге притворяться разработчиком будет все легче и легче.


